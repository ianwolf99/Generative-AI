import tensorflow as tf
from tensorflow.keras import layers, models
# define a VGG16 network
def VGG_16(weights_path=None):
	model = models.Sequential()
 	model.add(layers.ZeroPadding2D((1,1),input_shape=(224,224, 3)))
 	model.add(layers.Convolution2D(64, (3, 3), activation='relu'))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(64, (3, 3), activation='relu'))
	model.add(layers.MaxPooling2D((2,2), strides=(2,2)))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(128, (3, 3), activation='relu'))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(128, (3, 3), activation='relu'))
 	model.add(layers.MaxPooling2D((2,2), strides=(2,2)))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(256, (3, 3), activation='relu'))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(256, (3, 3), activation='relu'))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(256, (3, 3), activation='relu'))
 	model.add(layers.MaxPooling2D((2,2), strides=(2,2)))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(512, (3, 3), activation='relu'))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(512, (3, 3), activation='relu'))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(512, (3, 3), activation='relu'))
 	model.add(layers.MaxPooling2D((2,2), strides=(2,2)))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(512, (3, 3), activation='relu'))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(512, (3, 3), activation='relu'))
 	model.add(layers.ZeroPadding2D((1,1)))
 	model.add(layers.Convolution2D(512, (3, 3), activation='relu'))
 	model.add(layers.MaxPooling2D((2,2), strides=(2,2)))
 	model.add(layers.Flatten())
 	#top layer of the VGG net
 	model.add(layers.Dense(4096, activation='relu'))
 	model.add(layers.Dropout(0.5))
 	model.add(layers.Dense(4096, activation='relu'))
 	model.add(layers.Dropout(0.5))
 	model.add(layers.Dense(1000, activation='softmax'))
 	if weights_path:
 		model.load_weights(weights_path)
 	return model

import cv2
im = cv2.resize(cv2.imread('cat.jpg'), (224, 224).astype(np.float32))
#im = im.transpose((2,0,1))
im = np.expand_dims(im, axis=0)
# Test pretrained model
model = VGG_16('/Users/antonio/.keras/models/vgg16_weights_tf_dim_ordering_tf_kernels.h5')
model.summary()
model.compile(optimizer='sgd', loss='categorical_crossentropy')
out = model.predict(im) 	